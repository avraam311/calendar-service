// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/avraam311/calendar-service/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockeventRepo is a mock of eventRepo interface.
type MockeventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockeventRepoMockRecorder
}

// MockeventRepoMockRecorder is the mock recorder for MockeventRepo.
type MockeventRepoMockRecorder struct {
	mock *MockeventRepo
}

// NewMockeventRepo creates a new mock instance.
func NewMockeventRepo(ctrl *gomock.Controller) *MockeventRepo {
	mock := &MockeventRepo{ctrl: ctrl}
	mock.recorder = &MockeventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventRepo) EXPECT() *MockeventRepoMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockeventRepo) CreateEvent(ctx context.Context, event *models.EventCreate) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockeventRepoMockRecorder) CreateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockeventRepo)(nil).CreateEvent), ctx, event)
}

// DeleteEvent mocks base method.
func (m *MockeventRepo) DeleteEvent(ctx context.Context, ID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, ID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockeventRepoMockRecorder) DeleteEvent(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockeventRepo)(nil).DeleteEvent), ctx, ID)
}

// GetEvents mocks base method.
func (m *MockeventRepo) GetEvents(ctx context.Context, eventGet *models.EventGet) ([]*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, eventGet)
	ret0, _ := ret[0].([]*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockeventRepoMockRecorder) GetEvents(ctx, eventGet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockeventRepo)(nil).GetEvents), ctx, eventGet)
}

// UpdateEvent mocks base method.
func (m *MockeventRepo) UpdateEvent(ctx context.Context, event *models.Event) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockeventRepoMockRecorder) UpdateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockeventRepo)(nil).UpdateEvent), ctx, event)
}
